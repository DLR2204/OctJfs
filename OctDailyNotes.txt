
on-1 off-0   ---------->ASCII,UNICODE (	a-97)-18

s.l :- designing the websites(html,css,js,ts,.......)


p.l:- devloping the softwares(c,java.....)

								computer lang
								
					scripting lang			programming lang

										pop     		oop
							(procedure or pl)			(object or pl)
						basic,cobal,python......		java,.net	,python,c++,lisp
						
	oops:-
	----
	
	security:- Abstraction,Encapsulation
	
	performace :- Inheritance ,polymorphism
	
	
	****java is  oopl with oops features
	
	java:-
	-----
	paltform independency
	
	garbage collector
	
	
	1995-sun microsystem --------->portable device
	
	
	green team(.gt)------------>oak--------->java(.java)
	
	jdk (1.0) ------------------------------>jdk 23
	
	
	jse/j2se:-standalone app[server-client]-core java
	
	jee/j2ee:-distributed app[server-client] -Adv java
	
	jme/j2me:-mobile app-micro java
	
	
	methods:- set of statements where altogether will perform a task
	
	
	shortcuts:-
	----------
	
	ctrl+space :- suggestions
	
	ctrl+shift+o :- imports
	
	ctrl+shift+f :-format
	
	
	
	
	variables :-
	
		syntax:-	dt varname;			//declaration of a variables
					
					dt varname = value ;   //initialization of a variables
	
			
			
			
		(1)local variables(inside the method body)			(2)global variables(outside the met)
										
														static				instance
														
														
	(1)Syntax:-
		
		static:- 		static dt varname = value;
		-------
		instance :- 		 dt varname = value;
		-------
		
	(2)Memory allocation:-

		static :- static prop's will gets the memory space only once at the time of class loading 
		------					into the jvm
		
		instance :- instance prop's will gets the memory space for every object creation
		-------
		
	(3)Access:-
	
		static:- Static prop's can be accessed by the class reference
		------
		instance:- instance prop's can be accessed by the object reference
		--------
	(4)In the memory:-
	
		static:- Method Area
		------
		instance:- Heap Area
		----------
	(5)Usage:- 
	
		static :- common data
		------
		instance:- unique data
	    ---------
		
		
		Operators:-	UTRLA AB
		==========
		
		(1)Uniary Operators
		(2)Terinary Operators (?)
		(3)Relational Operators
		(4)Logical Operators
		(5)Assignment Operators = 
		(6)Arithematic Operators
		(7)Bitwise Operators
		
		
		
		Flow Control Statements:-
		========================
		
		(1)Conditional statements
		
		(2)Loops
		
		
		class:- variables + methods  [members + member functions]
		
		object :- copy of class
	
		ClassName objName;   //declaration of  a object
		
		ClassName objName = new ClassName();  //initialization of a object
		
		
		Methods :-  Based on the method signature/syntax .It's 2 types;-
		-------
					syntax:-
					
						
						accessModifier returnType metName(params....){
						
						//body
						
						}
						
						
		
		(1)Static Method
							
						accessModifier static returnType metName(params....){
						
						//body
						
						}
		
		
		
		
		(2)Dynamic Method
		
						accessModifier returnType metName(params....){
						
						//body
						
						}
		
	Inheritance:-Accquiring  parent class features to the child class
	----------- 
	
					* Code Reusability
	
			extends 					implements
			
		class->class					interface -->class
		interface->interface
		
		
		

****** In java M.I is not supported @class level.Becoz:-
			
		class A{					class B{
		
		add(a,b){					add(x,y){
		
		a+b;						a*b;
		
		}							}
		}							}
		
	class C extends A,B{
	
	add(4,6);   //10
	
	}
	
	
	
	* In java M.I is supported @interface level
	
	
	Method:-Based on the method body.It's 2 types:-
	------
	
	(1)Concrete Methods:-Methods with the method body
	
		syntax:-		accessModifier returnType metName(params....){
						
						//body
						
						}
	
	
	(2)Abstract Methods:-Methods with out the method body
	
				accessModifier returnType metName(params....);
				
				
	
	class:- It's the only collection of concrete method's.
	
	interface :- It's the only collection of abstract methods.
	
	abstract clss:- It's the combination of both abstract and concrete methods.
	
	
	Abstraction:-Hiding the data
	-----------
	
			* Security
			
			
			
	interface :- 100% 
	
	abstract class:- 0-100%
	
	class :-0%
	
	Polymorphism:-		*Code Reusability
	-------------
	
	(1)MethodOverloading:-Method name is same but diff is in the met params..
							(a)no:-of params...
							(b)ordeer of params...
							(c)type of params..
							
	
	
	(2)MethodOverriding:-Method name is but diff method implementation/body.
	
	
	class Parent{
	
	1000Cr();
	
	marriage(){
	kajol;}
	
	......
	
	
	}
	
	class child {
	
	@Override
	marriage(){
	deepika;}
	
	......
	
}

Encapsulation:-Wrapping of similar data into a single entity/class.

			*Security


Accessmodifer :- 
			
				public 
				
				private
				
				protected
				
				default
				
				
	Constructor:-to initialize the objects
	
						(1)Default constructor
						
			syntax:-
						a.m className(){
						
						//body
						}
						
						(2)Parametrized constructor
						
						a.m className(params...){
						
						//body
						}
						
				note:-Constructor call must be the first statement in a constructor