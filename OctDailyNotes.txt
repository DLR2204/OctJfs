
on-1 off-0   ---------->ASCII,UNICODE (	a-97)-18

s.l :- designing the websites(html,css,js,ts,.......)


p.l:- devloping the softwares(c,java.....)

								computer lang
								
					scripting lang			programming lang

										pop     		oop
							(procedure or pl)			(object or pl)
						basic,cobal,python......		java,.net	,python,c++,lisp
						
	oops:-
	----
	
	security:- Abstraction,Encapsulation
	
	performace :- Inheritance ,polymorphism
	
	
	****java is  oopl with oops features
	
	java:-
	-----
	paltform independency
	
	garbage collector
	
	
	1995-sun microsystem --------->portable device
	
	
	green team(.gt)------------>oak--------->java(.java)
	
	jdk (1.0) ------------------------------>jdk 23
	
	
	jse/j2se:-standalone app[server-client]-core java
	
	jee/j2ee:-distributed app[server-client] -Adv java
	
	jme/j2me:-mobile app-micro java
	
	
	methods:- set of statements where altogether will perform a task
	
	
	shortcuts:-
	----------
	
	ctrl+space :- suggestions
	
	ctrl+shift+o :- imports
	
	ctrl+shift+f :-format
	
	
	
	
	variables :-
	
		syntax:-	dt varname;			//declaration of a variables
					
					dt varname = value ;   //initialization of a variables
	
			
			
			
		(1)local variables(inside the method body)			(2)global variables(outside the met)
										
														static				instance
														
														
	(1)Syntax:-
		
		static:- 		static dt varname = value;
		-------
		instance :- 		 dt varname = value;
		-------
		
	(2)Memory allocation:-

		static :- static prop's will gets the memory space only once at the time of class loading 
		------					into the jvm
		
		instance :- instance prop's will gets the memory space for every object creation
		-------
		
	(3)Access:-
	
		static:- Static prop's can be accessed by the class reference
		------
		instance:- instance prop's can be accessed by the object reference
		--------
	(4)In the memory:-
	
		static:- Method Area
		------
		instance:- Heap Area
		----------
	(5)Usage:- 
	
		static :- common data
		------
		instance:- unique data
	    ---------
		
		
		Operators:-	UTRLA AB
		==========
		
		(1)Uniary Operators
		(2)Terinary Operators (?)
		(3)Relational Operators
		(4)Logical Operators
		(5)Assignment Operators = 
		(6)Arithematic Operators
		(7)Bitwise Operators
		
		
		
		Flow Control Statements:-
		========================
		
		(1)Conditional statements
		
		(2)Loops
		
		
		class:- variables + methods  [members + member functions]
		
		object :- copy of class
	
		ClassName objName;   //declaration of  a object
		
		ClassName objName = new ClassName();  //initialization of a object
		
		
		Methods :-  Based on the method signature/syntax .It's 2 types;-
		-------
					syntax:-
					
						
						accessModifier returnType metName(params....){
						
						//body
						
						}
						
						
		
		(1)Static Method
							
						accessModifier static returnType metName(params....){
						
						//body
						
						}
		
		
		
		
		(2)Dynamic Method
		
						accessModifier returnType metName(params....){
						
						//body
						
						}
		
	Inheritance:-Accquiring  parent class features to the child class
	----------- 
	
					* Code Reusability
	
			extends 					implements
			
		class->class					interface -->class
		interface->interface
		
		
		

****** In java M.I is not supported @class level.Becoz:-
			
		class A{					class B{
		
		add(a,b){					add(x,y){
		
		a+b;						a*b;
		
		}							}
		}							}
		
	class C extends A,B{
	
	add(4,6);   //10
	
	}
	
	
	
	* In java M.I is supported @interface level
	
	
	Method:-Based on the method body.It's 2 types:-
	------
	
	(1)Concrete Methods:-Methods with the method body
	
		syntax:-		accessModifier returnType metName(params....){
						
						//body
						
						}
	
	
	(2)Abstract Methods:-Methods with out the method body
	
				accessModifier returnType metName(params....);
				
				
	
	class:- It's the only collection of concrete method's.
	
	interface :- It's the only collection of abstract methods.
	
	abstract clss:- It's the combination of both abstract and concrete methods.
	
	
	Abstraction:-Hiding the data
	-----------
	
			* Security
			
			
			
	interface :- 100% 
	
	abstract class:- 0-100%
	
	class :-0%
	
	Polymorphism:-		*Code Reusability
	-------------
	
	(1)MethodOverloading:-Method name is same but diff is in the met params..
							(a)no:-of params...
							(b)ordeer of params...
							(c)type of params..
							
	
	
	(2)MethodOverriding:-Method name is but diff method implementation/body.
	
	
	class Parent{
	
	1000Cr();
	
	marriage(){
	kajol;}
	
	......
	
	
	}
	
	class child {
	
	@Override
	marriage(){
	deepika;}
	
	......
	
}

Encapsulation:-Wrapping of similar data into a single entity/class.

			*Security


Accessmodifer :- 
			
				public 
				
				private
				
				protected
				
				default
				
				
	Constructor:-to initialize the objects
	
						(1)Default constructor
						
			syntax:-
						a.m className(){
						
						//body
						}
						
						(2)Parametrized constructor
						
						a.m className(params...){
						
						//body
						}
						
				note:-Constructor call must be the first statement in a constructor
				
				
		Exception Handling:-
		
		(1)User friendly error msg's
		
		(2)Normal termination
		
		
		
		
		Arrays:-
		======
		
		
		(1)Only homogeneous elements are allowed
		
		(2)fixed in size.
		
		(3)no utility methods.
		
		
		
		syntax:-
		
		
			(1) dt arrname[]  = {1,2,4,5,6,6,7,88,8}
			
			(2)dt arrname[] = new dt[]{1,2,3,4,5,6,6};
			
			(3)dt arrname[] = new dt[5];
			
				arrname[3] = 45;
				
				
		collections:-(framework)
		=-==========
		
		
		(1)both heterogenous/homogeneous elements are allowed
		
		(2)growable in nature.
		
		(3)lots of utility methods
		
		
	
	java.lang.Comparable ------>compareTo(o1)-------------------->cso
		
		
	java.util.Comparator ------>compare(o1,o2); -------------->NSO
	
	
								apple box   97-98 =-ve
								
								
		
	filehandling:-  java.io
	-------------
	
	(1)To create a file :- File
	
	(2)Write into the file :-  FileWriter
							   BufferedWriter
							   PrintWriter
	
	(3)Read from the file :-   FileReader
							   BufferedReader
							   
							   
		junit:-  To test a piece of code in java
		
		
String:-
======

		String varname = value;  -------->literal
		

			String 					StringBuffer					StringBuilder
		
			immutable				mutable							mutable
		
									sync							non-sync(mutli-threading)
									
									
	MultiThreading:-running mutiple processes(thread) at a time.
	
	
									Database:-
									=========
									
								
	apple		234		
	
	tulips		674	
		
	oranges   	234
	

		Data:-Raw info of any real world entites
		
		
		Database :- The organized collection of data
									
									
									
		RDBMS:-TABLE = ROW(records) + COLUMN(fields)
		
		
		queries :- To perform any operation we need to write query .5 types:-
		
		(1)DDL(Data Definition Language):-create,alter,rename,drop,truncate..  [atuo committed]
		
		(2)DML(Data Manipulation Language):-insert,update,delete  [not auto comitted]
		
		(3)DRL(Data Retrival Language):-select
		
		(4)DCL(Data Control Language):-grant,revoke
		
		(5)TCL(Trans'n Control Language):-commit(ctrl+s),rollback(ctrl+z)
		
		
		
		(1)conn /as sysdba;
		(2)create user username identified by password;
		(3)grant connect, resource to username;
login:-		
		(4)conn username/password;
		
		
		
		drop :- deletes the entire table along with the data
		
		truncate :- deletes the data inside the table 
		
		delete :- delete the specified row/records. 
		
		
		
		
										jdbc:-
										=====
										
	java database connectivity:-
	----------------------------	
	
		
		(1)Loading the drivers
		
		(2)Create the connection
		
		(3)Create the statement
		
		(4)Exceuting the statement
		
		(5)Close the connections.
		
		
		limitations:-
		-----------
		
		(1)Queires
		
		(2)Table should be created
		
		(3)exception handling
		
		(4)boiler plate(repeated code)
		
		(5)same file for db prop's ,logic
		
		
		
		jpa (java persistence API):- [spefications]-interface
		----------------------------
		
		(1)No Queires
		
		(2)No Table should be created
		
		(3)No exception handling
		
		(4)No boiler plate(repeated code)
		
		(5)Diff files for db prop's ,logic
		
		
		orm tools(object reational mapping tools):-
		
		hibernate,ecllipse link,top link ,ibatis.......
		
		
		HIBERNATE:-
		=========
		
		class-------------------->Table   @Entity
		
		variables---------------->columns @Id
		
		objects ----------------->rows
		
		
		EntityManagerFacotry
		
		
		EntityManager
		
		insert --persist()
		
		update --merge()
		
		select --find()
		
		delete --remove()
		
		
		
		persistence.xml
		
		
		<persistence   schema>
		
		<persistence-unit  name="oracle"   transaction-type="resource-local">    </persistence-unit>
		
		
		db properties
		
		hibernate
		
		</persistence>
		
		
		
		Maven :- It is a build tool
		
		
							Spring
							=====
							
	Spring:-It's a non-invasive framework which is used to develop light-weighted and 
					loosley coupled web app's.
		
				
				invasive :- it will forces the programmer to use the inbuilt api
				
				non-invasive :- it will not forces the programmer to use the inbuilt api
		
		
		heavy-weighted:-
		
		
		
		class A{
		
		1000 methods
		
		}
		class B extends A{
		
		10 methods
		}
		
		class C extends B{
		
		1 method ------>1011 methods
		}
		
		
		tightly coupled:-If the dependencies(objects) are very high it is called tightly coupled app'n.
		
		loosley coupled:- If the dependencies are very low then it's called as loosley coupled app'n.
		
		
		spring 1.x------------------>spring 6.x
		
		
		Spring Core,Spring Boot,Spring Rest, Spring Security,Spring could,Spring Data Jpa,...................
		
		
											Spring Core:-
											===========
											
					To avoid the dependencies.------------>to make loosley coupled app'n
					
					
			Containers:-Containers will creates the objects 
						(1)BeanFactory
						(2)ApplicationContext
						
						
			Dependency Injection:- Injecting the data into the object
						(1)SetterInjection  :- <property></property>
						(2)ConstructorInjection :- <constructor-arg></constructor-arg>
						(3)Autowiring
						
			Configuration:- 
						(1)Xml Configuration
						(2)AnnotationConfiguration
						
						
						
						
										SpringBoot
										==========
										
					(1)AutoConfiguration
					
					(2)EmbeddedServer :- Tomcat :8080
					
					(3)Starters :- set of jar's
					
					(4)Actuators :- gives the health/env/status of app'n through url's.
			
			
			
			Controller :- It will interact with end client through http url's.
			
			Repository/Dao :-  It will interact with database to perform crud operations.
			
			service :- It will act like transprent layer b/n controller nd dao/repository.
			
			
			c-create
			r-retrive
			u-update
			d-delete
			
			
			SpringRest 
			=========
			
			webservices:- It is to make interation possible between two interoperable applications.
			
			
					(1)SOAP :- common lang is only "xml"[simple object access program]
					
					(2)REST :- common lang's are -"xml,json,html,php,txt...."[Representational state transfer]
			